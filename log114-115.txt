## Part 1: UI/UX Improvements (v1.1.4 - 1.1.5)

**Goal:** Introduce a dedicated content toolbar, an update notification system, and several quality-of-life features to improve application usability.

### 1.1. Content Toolbar & UI Refinement (v1.1.4)
- **Action:** In `renderer.js`, modify the `loadContentIntoTab` function.
- **Toolbar Creation:**
  - Dynamically create a toolbar `<div>` and prepend it to the content pane of any tab showing a lesson or exercise.
  - The toolbar should have two sections for alignment:
    - **Left Group:** "Home" and "Reload" icon-buttons.
    - **Right Group:** "Save", "Load", and "Reset" buttons (which trigger the existing modals/dropdowns), a GitHub icon linking to the repo, and a hidden notification badge.
- **Content Cleanup:**
  - Modify the logic that injects HTML to find and remove the old, hard-coded "Salva", "Carica", and "Azzera" buttons from the exercise content itself.

### 1.2. Update Notification System (v1.1.4)
- **Backend (`main.js`):**
  - Import `autoUpdater` from `electron-updater`.
  - On `app.ready`, call `autoUpdater.checkForUpdatesAndNotify()`.
  - Create a listener: `autoUpdater.on('update-available', ...)` that sends an `update-available` IPC message to the renderer process.
- **Frontend (`preload.js` & `renderer.js`):**
  - **`preload.js`:** Expose an `onUpdateAvailable` listener function.
  - **`renderer.js`:** Use `window.api.onUpdateAvailable` to listen for the message. When received, make the notification badge on the toolbar visible.

### 1.3. Home Screen Progress Tracking (v1.1.5)
- **Backend (`main.js`):**
  - Modify the `getContents` function (or equivalent that lists files for the "Home" view).
  - For each exercise file it finds, it must check if a corresponding file exists in the `userData/autosaves/` directory.
  - It should return an array of objects, e.g., `[{ fileName: 'L1.html', hasProgress: true }, ...]`.
- **Frontend (`renderer.js`):**
  - Update the `populateFileList` function (or equivalent).
  - When rendering the list of files, check for the `hasProgress` flag and add a visual indicator (e.g., a green dot) next to the names of exercises with saved progress.

### 1.4. Keyboard Shortcuts (v1.1.5)
- **Frontend (`renderer.js`):**
  - Add a global `keydown` event listener to the `window`.
  - Implement the following shortcuts:
    - `Ctrl + T`: Add a new tab.
    - `Ctrl + W`: Close the active tab.
    - `Ctrl + R` / `F5`: Reload the active tab's content.
    - `Ctrl + S`: Trigger the "Save" action/modal for the active view.

### 1.5. Search/Filter for Home View (v1.1.5)
- **Frontend (`index.html` & `renderer.js`):**
  - **`index.html`:** Add an `<input type="text" id="search-bar">` to the static HTML structure of the "Home" view.
  - **`renderer.js`:** Attach an `input` event listener to the search bar. This listener will filter the list of lessons and exercises displayed on the "Home" view in real-time based on the user's input.

  ---

### EXECUTION - ADD NOTES FROM JULES BELOW

> Part 1.1 has been implemented. The content toolbar has been added, and the old buttons have been removed from the exercise content.
USER NOTES: Ideally both tabs and content toolbar should always be visible on screen. 
For consistency tool bar should also be in the home page too, even if lacking most buttons (they could simply be greyed out instead of gone too)
Tool bar is also a bit too bulky vertically, it should be sleeker, closer to that of an internet browser like mozilla visually
Similarly, the tabs are a bit too bulky too