# Patch Plan: Versions 1.1.7 - 1.1.9
# Objective: Implement a comprehensive save management system, including a dedicated UI,
# import/export functionality, and virtual folder organization.

---
## Part 1: Foundational Save Management (v1.1.7)

**Goal:** Implement the core backend logic for importing/exporting saves and add basic UI hooks for file management.

### 1.1. Dependencies & Setup
- **Dependency:** Add a file-zipping library to the project.
  - `npm install jszip --save-dev`

### 1.2. Backend Import/Export Logic (`main.js`)
- **Module Imports:** Import `dialog` from Electron and the `jszip` library.
- **`export-saves` Handler:**
  - **Input:** An array of lesson names (e.g., `['L1-congiuntivoES', 'L2-ipoteticoES']`).
  - **Process:**
    1. Create a new JSZip instance.
    2. For each lesson name, read its save subfolder (`userData/saves/LESSON_NAME/`) and add all `.json` files to the zip archive, preserving the folder structure.
    3. Use `dialog.showSaveDialog` to prompt the user for a destination to save the `.zip` file.
    4. Write the generated zip file to the chosen path.
- **`import-saves` Handler:**
  - **Process:**
    1. Use `dialog.showOpenDialog` to allow the user to select a single `.zip` file.
    2. Read and decompress the selected zip file in memory using JSZip.
    3. Iterate through the zipped files, determine the correct lesson subfolder from the file's path within the zip, and write each save file to its proper location in the `userData/saves/` directory.
- **`rename-save` Handler:**
  - **Input:** The current file path and a new desired file name.
  - **Process:** Perform a `fs.rename` operation. Ensure the new name is sanitized to prevent invalid characters.

### 1.3. Frontend Integration (`preload.js` & `renderer.js`)
- **`preload.js`:** Expose the new `exportSaves`, `importSaves`, and `renameSave` functions through the `window.api` bridge.
- **`renderer.js`:**
  - In the "Load" dropdown menu, add a "Rename" icon next to each save file entry.
  - Clicking this icon should transform the file name into an editable `<input>`.
  - On `blur` or `Enter`, the input should call `window.api.renameSave` with the old and new names.

---
## Part 2: The Save Library UI (v1.1.8)

**Goal:** Build a dedicated "Save Library" page to serve as the central hub for managing all save files.

### 2.1. Save Library View (`renderer.js`)
- **Tab Type:** Modify the tab management logic to support a special "Save Library" tab.
- **Activation:** Add a new, persistent button to the main tab bar (e.g., using a floppy disk icon) that opens or switches to the Save Library tab.
- **`renderSaveLibrary()` Function:** Create a new function to construct the library's UI.
  - **Layout:** It will create a two-column view: a narrow sidebar on the left for navigation and a large content area on the right for displaying saves.
  - **Sidebar:** The sidebar will be populated with a clickable list of all lessons and exercises.
  - **Content Area:** When a lesson is clicked in the sidebar, this area will be populated with all of its associated save files, displayed as icons.
- **Save Icon Design:** Each save file will be represented by a medium-sized icon or card, showing the save name and other relevant metadata.

### 2.2. Multi-Select & Actions (`renderer.js`)
- **Selection Logic:** Implement event listeners on the save icons to handle multi-selection:
  - **Single Click:** Selects one file, deselecting others.
  - **Ctrl/Cmd + Click:** Toggles the selection state of a file.
  - **Shift + Click:** Selects a range of files between the last-clicked item and the current one.
- **Action Integration:**
  - Move the "Import" and "Export" buttons to the header of the Save Library page.
  - The "Export" button will now operate on the currently selected files, calling `window.api.exportSaves` with the appropriate lesson names.

---
## Part 3: Virtual Folders (v1.1.9)

**Goal:** Allow users to create custom folders within the Save Library to organize saves without altering the underlying file system.

### 3.1. Backend for Virtual Folders (`main.js`)
- **Layout File:**
  - On app startup, the backend will check for a `save-library-layout.json` file in the `userData` directory. If it doesn't exist, it will be created with a default empty structure `{}`.
- **IPC Handlers:**
  - **`get-layout()`:** Reads and returns the parsed content of `save-library-layout.json`.
  - **`save-layout(newLayout)`:** Takes a JSON object from the renderer and writes it to `save-library-layout.json`, overwriting the previous content.

### 3.2. Frontend Virtual Folder Logic (`renderer.js`)
- **State Management:** The Save Library will maintain a state object that holds the layout fetched from the backend.
- **Fetch Layout:** When the Save Library is opened, it will call `window.api.getLayout()` to get the current folder structure.
- **Update Rendering:** The `renderSaveLibrary` function will be modified to:
  - First, render the virtual folders for the selected lesson.
  - Then, render the save file icons, placing them inside the appropriate virtual folder based on the layout data, or at the root level if they haven't been categorized.
- **Folder Creation:**
  - Add a "New Folder" button to the UI.
  - Clicking it will add a new folder object to the local layout state and trigger a call to `window.api.saveLayout()` to persist the change.
- **Drag-and-Drop Functionality:**
  - Implement drag-and-drop for the save file icons.
  - Dropping a save icon onto a folder icon will update the local layout state (e.g., `layout['L1-congiuntivoES']['My Folder'].push('save-file-name.json')`) and then immediately call `window.api.saveLayout()` to save the new structure.
