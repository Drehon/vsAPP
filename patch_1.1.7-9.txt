# Patch Plan: Versions 1.1.7 - 1.1.9
# Objective: Implement a comprehensive save management system, including a dedicated UI,
# import/export functionality, and virtual folder organization.

---
## Part 1: Foundational Save Management (v1.1.7)

**Goal:** Implement the core backend logic for importing/exporting saves and add basic UI hooks for file management.
Open export page from toolbar, on the left of github icon
Select saves for export
Export

For import
Icon on the left of Export
Select file to be unpacked
Simply add all files to the save folders BUT rename them with suffix _IMP

### 1.1. Dependencies & Setup
- **Dependency:** Add a file-zipping library to the project.
  - `npm install jszip --save-dev`

### 1.2. Backend Import/Export Logic (`main.js`)
- **Module Imports:** Import `dialog` from Electron and the `jszip` library.
- **`export-saves` Handler:**
  - **Input:** An array of lesson names (e.g., `['L1-congiuntivoES', 'L2-ipoteticoES']`).
  - **Process:**
    1. Create a new JSZip instance.
    2. For each lesson name, read its save subfolder (`userData/saves/LESSON_NAME/`) and add all `.json` files to the zip archive, preserving the folder structure.
    3. Use `dialog.showSaveDialog` to prompt the user for a destination to save the `.zip` file.
    4. Write the generated zip file to the chosen path.
- **`import-saves` Handler:**
  - **Process:**
    1. Use `dialog.showOpenDialog` to allow the user to select a single `.zip` file.
    2. Read and decompress the selected zip file in memory using JSZip.
    3. Iterate through the zipped files, determine the correct lesson subfolder from the file's path within the zip, and write each save file to its proper location in the `userData/saves/` directory.
- **`rename-save` Handler:**
  - **Input:** The current file path and a new desired file name.
  - **Process:** Perform a `fs.rename` operation. Ensure the new name is sanitized to prevent invalid characters.

### 1.3. Frontend Integration (`preload.js` & `renderer.js`)
- **`preload.js`:** Expose the new `exportSaves`, `importSaves`, and `renameSave` functions through the `window.api` bridge.
- **`renderer.js`:**
  - In the "Load" dropdown menu, add a "Rename" icon next to each save file entry.
  - Clicking this icon should transform the file name into an editable `<input>`.
  - On `blur` or `Enter`, the input should call `window.api.renameSave` with the old and new names.

---

Function to be planned - lesson index
Refer to harmer.html in /references/ to understand what i mean

----

Function to be planned - bookmark
Add a bookmark that can be applied to any page via shortcut OR by right-click mouse menu
Bookmark should work similarly to save states, meaning there should be a file that keeps track of ALL BOOKMARKS
that automatically updates every time a bookmark is placed
and refreshes the bookmark on a page every time a page is opened or the user clicks on a different tab

Bookmarks should be recognizable but also visually pleasing.

---

Hihglihgt

Same reasoning as bookmark
User should be able to highlight portions of text
Save information in same file as bookmarks, we can call said file page-state