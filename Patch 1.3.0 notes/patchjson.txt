## Patch Notes Debug Log - 2025-08-01

### Attempt 1: Dynamic Loading with Simplified Backend

**Actions Taken:**
1.  **Modified `src/main.js`:** The `get-patch-notes` IPC handler was simplified. All logic for fetching from the GitHub API and using a cache was removed. The function was modified to *only* read the `patchnotes.json` file from the application's root directory.
2.  **Modified `others/patch-notes.html`:** The page was updated to be dynamic. The static placeholder content was removed. A `<script>` was added to the end of the file. This script was set to run on the `DOMContentLoaded` event. Its purpose was to call `window.api.getPatchNotes()` and then build the HTML for each patch note from the returned data.

**Outcome:**
*   The user reported that the page remains empty.

**Hypothesis for Failure:**
*   My primary hypothesis is a timing issue. The `preload.js` script dispatches a custom event, `api-ready`, after it has finished setting up the `window.api` object. My script in `patch-notes.html` currently only waits for `DOMContentLoaded`, which may fire *before* the `api-ready` event. If this happens, the script would try to call `window.api.getPatchNotes()` before the function exists, causing an error and preventing the page from loading content.

**Next Steps:**
*   I will modify the script in `others/patch-notes.html` to listen for the `api-ready` event on the `window` object, ensuring it only runs after the API is guaranteed to be available.

### Attempt 2: Fixing the Timing Issue

**Action Taken:**
*   Modified the script in `others/patch-notes.html`. The event listener was changed from `DOMContentLoaded` to the custom `api-ready` event.

**Expected Outcome:**
*   This change should resolve the timing issue. The script will now wait for the `window.api` object to be fully initialized before attempting to call `window.api.getPatchNotes()`. This should allow the patch notes to be fetched and displayed correctly.

------

FAILED

------

fix(renderer): Resolve race condition in patch notes loading

The patch notes page was not loading its content because of a race condition in the event-based loading mechanism.

The `preload.js` script was dispatching an `api-ready` event on `DOMContentLoaded`, but the event listener in `others/patch-notes.html` was sometimes attached after the event had already fired, causing the loading script to never execute.

This change simplifies the loading logic by removing the event-based communication entirely:
- The unnecessary `api-ready` event dispatch is removed from `preload.js`.
- The script in `others/patch-notes.html` is modified to execute directly when parsed, removing the event listener.

This ensures the patch notes are fetched reliably as the `preload.js` script is guaranteed to execute before the page's scripts.

-----

FAILED
And reverted cause it broke the app.