### **Objective for v1.1.6: Achieve Full Offline Functionality**

Refactor the application to remove all external network dependencies (excluding the optional update check), ensuring that all features are fully functional without an internet connection. Provide clear visual feedback to the user about the application's online/offline status.

---

#### **Phase 0: Version Update**

1.  **Update Version:**
    * In `package.json`, change `"version"` to `"1.1.6"`.

---

#### **Phase 1: Localize External Assets (Google Fonts)**

The primary external dependency is Google Fonts, which are fetched at runtime. We will download and bundle them with the application.

* **Actions:**
    1.  **Download Fonts:** Use a tool like `google-webfonts-helper` or manually access the CSS URL in your browser (`https://fonts.googleapis.com/css2?family=Inter...` and `...Source+Code+Pro...`) to download the `.woff2` font files for Inter and Source Code Pro.
    2.  **Create Local Font Directory:** Create a new folder structure, for example: `src/assets/fonts/`. Place the downloaded font files inside.
    3.  **Create Local Font CSS:** Create a new CSS file, for example: `src/assets/fonts.css`. Copy the `@font-face` rules provided by Google Fonts into this file and update the `src: url(...)` paths to point to your local `.woff2` files.
    4.  **Update HTML Files:** Go through all HTML files (`index.html`, and all files in `lessons` and `exercises`) and replace the `<style> @import url('https://fonts.googleapis.com/...'); </style>` blocks with a single link to your new local stylesheet: `<link href="../src/assets/fonts.css" rel="stylesheet">`.
    5.  **Update `renderer.js`:** The main `renderer.js` needs to import this new CSS file so Webpack can bundle it for the main view: `import './assets/fonts.css';`.

---

#### **Phase 2: Stricter Content Security Policy (`main.js`)**

Now that fonts are local, we can lock down the CSP to prevent any external connections.

* **File to Edit:** `src/main.js`
* **Action:** Modify the `Content-Security-Policy` header.
    * Remove `https://fonts.googleapis.com` from the `style-src` directive.
    * Remove `https://fonts.gstatic.com` from the `font-src` directive.
    * The new, stricter policy will only allow `'self'` and `'unsafe-inline'`.

---

#### **Phase 3: Implement Offline Status Indicator**

Provide the user with clear, persistent feedback about the network status.

* **File to Edit:** `index.html`
    * **Action:** Add a status indicator element to the footer.
        ```html
        <footer class="...">
          App Version: <span id="app-version"></span>
          <span class="mx-2">|</span>
          Status: <span id="network-status" class="font-semibold">Online</span>
        </footer>
        ```

* **File to Edit:** `renderer.js`
    * **Action:** Add logic to manage the status indicator.
        1.  Get a reference to the `#network-status` element.
        2.  Create a function `updateNetworkStatus()` that checks `navigator.onLine` and updates the element's text and color (e.g., green for online, gray for offline).
        3.  Call this function once on `DOMContentLoaded`.
        4.  Add event listeners to the `window` object for the `'online'` and `'offline'` events, each calling `updateNetworkStatus()`.

---

#### **Phase 4: Make Update Checker Offline-Aware**

Prevent the `electron-updater` from running and throwing errors when the application is offline.

* **File to Edit:** `main.js`
    * **Action:** Wrap the `autoUpdater` logic in a network check.
        1.  At the top, import the `net` module: `const { net } = require('electron');`.
        2.  Modify the `app.on('ready', ...)` function. Before calling the updater, check for connectivity.
        ```javascript
        // Inside app.on('ready', ...)
        const request = net.request('[https://www.github.com](https://www.github.com)');
        request.on('response', () => {
          console.log('Connection successful, checking for updates.');
          autoUpdater.checkForUpdatesAndNotify();
        });
        request.on('error', (error) => {
          console.log('No internet connection, skipping update check.', error.message);
        });
        request.end();
        ```
    * **Action 2:** Modify the `update-available` event listener to pass the `mainWindow` object, ensuring it can always find the window to send the message to.
        ```javascript
        autoUpdater.on('update-available', () => {
          const win = BrowserWindow.getAllWindows()[0];
          if (win) {
            win.webContents.send('update-available');
          }
        });
        