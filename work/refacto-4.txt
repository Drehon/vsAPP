# Summary of Refactoring Work and Deviations from Plan (Phases 1-3)

This document summarizes the work completed during the first three phases of the architectural refactoring outlined in `uniform.txt`. It covers the key achievements and highlights the significant challenges and deviations from the original, simplistic plan.

---

## Phases 1 & 2: Foundation and Componentization

**Documentation:** `work/refacto-12.txt`

The first two phases of the project proceeded largely according to the original plan and were highly successful in establishing the new architecture's foundation.

### Key Achievements:
- **Content Hydration Engine:** The brittle, path-based `if/else` logic in `content-loader.js` was successfully replaced with a robust, data-driven `content-hydrator.js`. This new engine uses a `data-module` attribute to delegate rendering to appropriate handlers.
- **Static Content Migration:** All static lesson pages in the `lessons/` and `lessonsAN/` directories were successfully converted into pure, standardized HTML fragments, proving the viability of the new system.
- **Universal State Management:** State management was decisively decoupled from the file system. The system now uses a logical `data-page-id` to save and load progress, making it more robust and scalable.
- **Componentization:** A reusable, state-agnostic notes component was successfully created, establishing a clear pattern for future UI components.

**Deviations from Plan:** None. These foundational phases were executed as planned.

---

## Phase 3: Interactive Module Refactoring & Unforeseen Complexity

**Documentation:** `work/refacto-3.txt`

Phase 3, focused on migrating the first simple interactive exercises, represented a significant deviation from the original plan. The initial plan was overly optimistic and did not account for the deep-seated architectural issues that would be uncovered. The successful completion of this phase required extensive, iterative debugging and major architectural changes not originally anticipated.

### Major Deviations and Challenges:

1.  **Challenge: The Stateful Singleton Handler**
    *   **Problem:** The most significant unforeseen issue was that the `exercise-handler.js` module was designed as a stateful singleton. This caused critical, hard-to-debug failures where the UI would become unresponsive when switching between multiple exercise tabs, as they all shared and corrupted a single state context.
    *   **Deviation/Resolution:** A major architectural pivot was required. The handler was completely refactored from a single exported function into a **JavaScript Class**. The `content-hydrator` was updated to create a new, isolated `ExerciseHandler` instance for each exercise tab, storing it on the tab object itself. This was a critical deviation that ensures tab state is properly encapsulated, making the application robust for multi-tab use.

2.  **Challenge: Broken UI Feedback due to Build Process**
    *   **Problem:** A persistent bug prevented visual feedback (green/red highlights on answers) from appearing. Multiple attempts to fix this by modifying the JavaScript logic failed.
    *   **Deviation/Resolution:** The root cause was not a logic error but a **misconfigured build process**. The project's CSS build step was broken, meaning any changes to the source CSS files (`src/index.css`) were never compiled into the final stylesheet loaded by the application (`src/style.css`). As fixing the build system was out of scope, a pragmatic workaround was devised: the necessary CSS rules were manually compiled and **injected directly into the final `style.css` file**.

3.  **Challenge: Iterative State Management Bug-Fixing**
    *   **Problem:** The save, load, and reset functionality was plagued by numerous bugs, including race conditions and logical flaws in the content-loading pipeline. For example, a reset would delete the save file on disk, but the stale state would persist in memory, making the reset appear to have failed.
    *   **Deviation/Resolution:** This required multiple, iterative rounds of debugging and fixes, going far beyond the scope of the original plan. The logic in `content-loader.js` and `tab-manager.js` was repeatedly refined to ensure the `pageId` was available at the right time and that in-memory state was correctly nullified when a save file was not found.

### Conclusion

While Phases 1 and 2 established a solid foundation as planned, Phase 3 revealed the true complexity of refactoring the application's stateful, interactive components. The successful outcome was only achieved by significantly deviating from the original plan to address unforeseen architectural flaws. The resulting system—with its class-based handlers and robust state lifecycle—is far more stable and scalable than the one envisioned in the initial, simplistic plan.
