# FASE 4: PIANO DI LAVORO

## OBIETTIVO:
Implementare un sistema di aggiornamento automatico per l'applicazione utilizzando `electron-updater`. Questo permetterà all'applicazione di verificare la presenza di nuove versioni su GitHub, scaricarle e installarle automaticamente.

## STATO ATTUALE RILEVATO:
- L'applicazione non ha alcuna funzionalità di auto-aggiornamento.
- Il file `package.json` non contiene le configurazioni necessarie per `electron-updater` (es. repository URL).

## PIANO DI AZIONE:

### STEP 1: Installazione e Configurazione di `electron-updater`
- **Azione:** Installare il modulo `electron-updater`.
- **Comando:** `npm install electron-updater`
- **Azione:** Configurare il `package.json` per l'auto-aggiornamento. Sarà necessario aggiungere la sezione `build` con le informazioni sul provider (GitHub) e l'URL del repository. Questo di solito viene gestito da `electron-forge` o `electron-builder`, ma le informazioni di base devono essere presenti.

### STEP 2: Implementazione della Logica di Auto-Update (`src/main.js`)
- **Azione:** Importare `autoUpdater` dal modulo `electron-updater`.
- **Azione:** Aggiungere il codice nel listener dell'evento `ready` dell'app per inizializzare l'auto-updater.
- **Azione:** Chiamare `autoUpdater.checkForUpdatesAndNotify()` per avviare il processo di verifica. Questo metodo gestisce automaticamente il download, la notifica e l'installazione.
- **Azione:** Aggiungere listener per gli eventi di `autoUpdater` (es. `update-available`, `update-downloaded`, `error`) per fornire feedback all'utente tramite dialoghi o notifiche.

### STEP 3: Esposizione delle Informazioni di Versione (`src/preload.js`)
- **Azione:** Creare ed esportare una nuova funzione `getAppVersion` tramite `contextBridge`.
- **Scopo:** Questa funzione permetterà al renderer di richiedere e visualizzare la versione corrente dell'applicazione, in modo che l'utente possa vedere quale versione sta utilizzando.

### STEP 4: Visualizzazione della Versione nel Frontend (`index.html`)
- **Azione:** Aggiungere un elemento nel file `index.html` (ad esempio, un `<span>` nel footer) dove verrà visualizzata la versione dell'app.
- **ID Esempio:** `<span id="app-version"></span>`

### STEP 5: Logica di Visualizzazione nel Renderer (`src/renderer.js`)
- **Azione:** All'avvio della pagina, chiamare la nuova funzione `window.api.getAppVersion()`.
- **Azione:** Aggiornare il contenuto dell'elemento `#app-version` con la versione ricevuta.

### STEP 6: Verifica e Test (Simulato)
- **Azione:** Avviare l'applicazione.
- **Criterio di Successo:**
  - La versione dell'app viene visualizzata correttamente nella pagina principale.
  - I log del `main.js` mostrano che `electron-updater` è stato inizializzato e sta verificando la presenza di aggiornamenti (anche se non ne troverà uno senza una release su GitHub).
  - L'applicazione si avvia senza errori relativi all'auto-updater.
  - Per un test reale, sarebbe necessario creare una release su GitHub e cambiare il numero di versione nel `package.json` per simulare un aggiornamento.
