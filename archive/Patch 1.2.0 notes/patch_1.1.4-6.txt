# Patch Plan: Versions 1.1.4 - 1.1.6
# Objective: Enhance the user experience with a dedicated toolbar, quality-of-life features,
# and full offline functionality.

---
## Part 1: UI/UX Improvements (v1.1.4 - 1.1.5)

**Goal:** Introduce a dedicated content toolbar, an update notification system, and several quality-of-life features to improve application usability.

### 1.1. Content Toolbar & UI Refinement (v1.1.4)
- **Action:** In `renderer.js`, modify the `loadContentIntoTab` function.
- **Toolbar Creation:**
  - Dynamically create a toolbar `<div>` and prepend it to the content pane of any tab showing a lesson or exercise.
  - The toolbar should have two sections for alignment:
    - **Left Group:** "Home" and "Reload" icon-buttons.
    - **Right Group:** "Save", "Load", and "Reset" buttons (which trigger the existing modals/dropdowns), a GitHub icon linking to the repo, and a hidden notification badge.
- **Content Cleanup:**
  - Modify the logic that injects HTML to find and remove the old, hard-coded "Salva", "Carica", and "Azzera" buttons from the exercise content itself.

### 1.2. Update Notification System (v1.1.4)
- **Backend (`main.js`):**
  - Import `autoUpdater` from `electron-updater`.
  - On `app.ready`, call `autoUpdater.checkForUpdatesAndNotify()`.
  - Create a listener: `autoUpdater.on('update-available', ...)` that sends an `update-available` IPC message to the renderer process.
- **Frontend (`preload.js` & `renderer.js`):**
  - **`preload.js`:** Expose an `onUpdateAvailable` listener function.
  - **`renderer.js`:** Use `window.api.onUpdateAvailable` to listen for the message. When received, make the notification badge on the toolbar visible.

### 1.3. Home Screen Progress Tracking (v1.1.5)
- **Backend (`main.js`):**
  - Modify the `getContents` function (or equivalent that lists files for the "Home" view).
  - For each exercise file it finds, it must check if a corresponding file exists in the `userData/autosaves/` directory.
  - It should return an array of objects, e.g., `[{ fileName: 'L1.html', hasProgress: true }, ...]`.
- **Frontend (`renderer.js`):**
  - Update the `populateFileList` function (or equivalent).
  - When rendering the list of files, check for the `hasProgress` flag and add a visual indicator (e.g., a green dot) next to the names of exercises with saved progress.

### 1.4. Keyboard Shortcuts (v1.1.5)
- **Frontend (`renderer.js`):**
  - Add a global `keydown` event listener to the `window`.
  - Implement the following shortcuts:
    - `Ctrl + T`: Add a new tab.
    - `Ctrl + W`: Close the active tab.
    - `Ctrl + R` / `F5`: Reload the active tab's content.
    - `Ctrl + S`: Trigger the "Save" action/modal for the active view.

### 1.5. Search/Filter for Home View (v1.1.5)
- **Frontend (`index.html` & `renderer.js`):**
  - **`index.html`:** Add an `<input type="text" id="search-bar">` to the static HTML structure of the "Home" view.
  - **`renderer.js`:** Attach an `input` event listener to the search bar. This listener will filter the list of lessons and exercises displayed on the "Home" view in real-time based on the user's input.

---
## Part 2: Full Offline Functionality (v1.1.6)

**Goal:** Eliminate all external network dependencies (except the optional update check) and provide clear feedback on network status.

### 2.1. Localize External Assets
- **Action:** Download all required font files (`.woff2` for Inter and Source Code Pro) from Google Fonts.
- **File Structure:**
  - Create a new directory: `src/assets/fonts/`.
  - Place the downloaded font files inside this directory.
- **Local Stylesheet:**
  - Create a new CSS file: `src/assets/fonts.css`.
  - Copy the `@font-face` rules from Google's CSS into this file and update the `src: url(...)` paths to point to the local font files.
- **HTML & JS Updates:**
  - **HTML:** In all HTML files (`index.html`, lessons, exercises), remove the Google Fonts `@import` and replace it with a `<link>` to the local `fonts.css` file.
  - **JS:** In `renderer.js`, add `import './assets/fonts.css';` to ensure Webpack bundles the stylesheet for the main application shell.

### 2.2. Stricter Content Security Policy (CSP)
- **Backend (`main.js`):**
  - Modify the `Content-Security-Policy` header in the session configuration.
  - Remove `https://fonts.googleapis.com` and `https://fonts.gstatic.com` from the `style-src` and `font-src` directives, respectively. The policy should only allow sources from `'self'` and `'unsafe-inline'`.

### 2.3. Implement Offline Status Indicator
- **Frontend (`index.html`):**
  - Add a status indicator element to the footer, e.g., `Status: <span id="network-status">Online</span>`.
- **Frontend (`renderer.js`):**
  - Create a function `updateNetworkStatus()` that checks `navigator.onLine`.
  - This function should update the text and color of the `#network-status` element (e.g., green for Online, gray for Offline).
  - Call the function once on page load.
  - Add `window` event listeners for `online` and `offline` events, which will call `updateNetworkStatus()`.

### 2.4. Make Update Checker Offline-Aware
- **Backend (`main.js`):**
  - Import the `net` module from Electron.
  - Before calling `autoUpdater.checkForUpdatesAndNotify()`, perform a network request to a reliable server (e.g., `github.com`).
  - Only run the update check if the request is successful. If it fails, log that the check is being skipped due to no internet connection.
