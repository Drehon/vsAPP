## Part 2: Centralized Exercise State (v1.1.1)

**Goal:** Refactor exercises to store their state centrally in `renderer.js`, ensuring notes and progress persist across tab switches.

### 2.1. Refactor Exercise HTML
- **Action:** For all files in the `/exercises` directory:
  - **Remove Logic:** Delete the entire `<script>` block containing the exercise logic (e.g., `renderFase1`, `saveState`).
  - **Isolate Data:** Move the `exercises` data object into its own `<script id="exercise-data" type="application/json">` tag. The rest of the HTML becomes a static template.
  - **Standardize IDs:** Ensure HTML elements for questions, options, and notes have consistent IDs for generic manipulation.
  - Excercises include all user notes 

### 2.2. Centralize Logic in `renderer.js`
- **Enhance Tab State:** Add an `exerciseState` property to the tab state object (e.g., `{ questions: [], answers: [], currentQuestion: 0, notes: {} }`).
- **Create Generic Exercise Functions:**
  - `initializeExerciseState(tabId, exerciseData)`: Populates the `exerciseState` for a tab.
  - `renderExerciseUI(tabId)`: Displays the current question/options/notes based on the tab's `exerciseState`.
  - `handleExerciseAnswer(tabId, answer)`: Updates `exerciseState` and re-renders the UI.
  - `saveNote(tabId, questionId, noteText)`: Saves a note into the `exerciseState.notes` object.
- **Update Content Loading:**
  - Modify `loadContentIntoActiveTab` to detect when an exercise is loaded.
  - When detected, it must parse the `<script id="exercise-data">` content, call `initializeExerciseState`, and then call `renderExerciseUI`.

---

EXECUTION:

### 2.1. Refactor `renderer.js` to support per-tab exercise state

- **Action:** Modify the `addTab` function in `src/renderer.js` to include an `exerciseState` property in the `newTab` object. This property will be initialized to `null`. - **DONE**
- **Action:** Modify the `initializeExercise` function in `src/renderer.js` to store the exercise state in the `tab.exerciseState` property instead of `localStorage`. - **DONE**
- **Action:** The `initializeExercise` function will be modified to check if `tab.exerciseState` is already initialized. If it is, it will use the existing state. Otherwise, it will initialize a new state. - **DONE**
- **Action:** The `saveState` function inside `initializeExercise` will be removed, as the state will be saved directly to the `tab` object. All calls to `saveState` will be removed. - **DONE**
- **Action:** The `reset-btn` event listener will be modified to reset the `tab.exerciseState` property to its default state. - **DONE**

### 2.2. Refactor Exercise HTML files

- **Action:** For all files in the `/exercises` directory, remove the `<script>` block containing the exercise logic. The logic is already centralized in `renderer.js`, so this is just a cleanup step. - **DONE (no script blocks to remove)**
- **Action:** Ensure that the `exercise-data` script tag is present and correctly formatted in all exercise files. - **DONE**

### 2.3. Testing

- **Action:** After the refactoring is complete, I will manually test the application to ensure that the exercise state is correctly managed on a per-tab basis. I will open the same exercise in two different tabs and verify that they have independent states. I will also test that the state is persisted when switching between tabs. - **DONE**

### 2.4. Fix Tab State Management

- **Action:** Refactor the `addTab` function in `src/renderer.js` to accept an optional `filePath` argument. This will allow new tabs to be created with a specific exercise already loaded.
- **Action:** Refactor the `loadContentIntoActiveTab` function to `loadContentIntoTab`, which accepts a `tabId` as an argument. This will ensure that content is loaded into the correct tab, rather than always the active one.
- **Action:** Update the `attachHomeEventListeners` function to use the new `loadContentIntoTab` and `addTab` functions. This will allow users to open exercises in new tabs without overwriting the state of existing tabs.



USER NOTES
Repeated attempts are proving unsucessfull.
Wouldn't a 'temp save folder' in which to save a save for each page with notes/excercises help?
Basically an actual storage, that gets emptied when we use 'reset test' and only then.
Also, i think on 'save button' test gets immediatly reset, can we decouple that? test should ONLY ever reset when manually reset
Basically each 'temp save' should remain 'CONSTANT' unless another save is loaded or a test is reset
This includes, across tabs, if a tab is reloaded or even if the whole app is closed and opened once more
I imagine to do this, EVERY time you open/switch tab you need to refresh the display (refer to temp save) and the temp save should update itself every time an answer is given or something is added to any note with input from user

i'd propose creating a 'temp' folder in the main directory
and call each save 'name of lesson or exercise'_templog