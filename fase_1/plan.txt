**Obiettivi Fase 1: Creazione della "Home" e Navigazione**

1.  **Analisi e Struttura:**
    *   Verificare la struttura delle cartelle `/lessons` e `/exercises`.
    *   Assicurarsi che `index.html` sia presente e vuoto o con una struttura di base.
    *   Verificare che `main.js` e `preload.js` esistano.

2.  **Backend - `main.js`:**
    *   Importare i moduli `fs` e `path`.
    *   Creare una funzione `getContents(directory)` che legga i nomi dei file da una data cartella (es. `lessons`).
    *   Esporre questa funzione tramite `ipcMain.handle` per renderla accessibile dal `preload.js`. Saranno necessari due gestori, uno per le lezioni e uno per gli esercizi.

3.  **Backend - `preload.js`:**
    *   Creare un oggetto `api` nel `contextBridge`.
    *   Aggiungere due metodi all'oggetto `api`: `getLessons()` e `getExercises()`.
    *   Questi metodi invocheranno i rispettivi gestori `ipcRenderer.invoke` per comunicare con `main.js`.

4.  **Frontend - `renderer.js` (o script in `index.html`):**
    *   Creare una funzione asincrona `populateContent()`.
    *   All'interno, chiamare `window.api.getLessons()` e `window.api.getExercises()` per ottenere le liste di file.
    *   Per ogni lista, ciclare sui nomi dei file e creare un elemento `<li>` con un link `<a>`.
    *   L'attributo `href` del link punter√† al percorso relativo del file (es. `../lessons/file.html`).
    *   Aggiungere gli elementi `<li>` alle rispettive liste `<ul>` nell'HTML (`#lessons-list`, `#exercises-list`).
    *   Eseguire `populateContent()` al caricamento della pagina.

5.  **Frontend - `index.html`:**
    *   Aggiungere due `<ul>` con id `lessons-list` e `exercises-list` per ospitare i contenuti.
    *   Includere lo script `renderer.js`.

6.  **Test e Verifica:**
    *   Avviare l'applicazione Electron.
    *   Verificare che la home page mostri correttamente i link ai file presenti in `/lessons` e `/exercises`.
    *   Cliccare su un link e verificare che la pagina corrispondente venga caricata.
