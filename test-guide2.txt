# Test Guide for Phase 4: Diagnostic Modules

This document provides instructions for testing the application after the completion of the Phase 4 refactoring. The focus is on verifying the functionality of the newly migrated diagnostic tests and ensuring the application's robustness.

---

## 1. Test Environment Setup

- **Browser:** Use a modern web browser (e.g., Chrome, Firefox).
- **Offline Simulation:** For offline testing, you must first ensure the local Chart.js library is present.
  - **Verify File:** Check that the file `src/lib/chart.umd.min.js` exists. If not, follow the download instructions in `work/refacto-4.txt` (Bonus Step).
  - **Disconnect:** After verifying the file, disconnect your computer from the internet or use your browser's developer tools to simulate an offline network condition.

---

## 2. Test Cases for Diagnostic Tests

These tests should be run for **both** diagnostic test pages:
- **"Student Grammar"** (loads from `others/DG-student-grammar.html`)
- **"Student Verbs"** (loads from `others/DV-student-verbs.html`)

### Test Case 2.1: Basic Functionality and State Persistence
1.  **Launch** the application.
2.  From the main menu, **open the "Student Grammar" test**.
3.  **Verify Initial State:** The test should render completely, with the diagnostics header (Score: 0%, 0/XX) and an empty performance chart visible.
4.  **Answer First Block:** Fill in some answers for the first block. Deliberately provide a mix of correct and incorrect answers.
5.  **Reload the Tab:** Close the "Student Grammar" tab and then re-open it from the main menu.
6.  **Verify Persistence:** Your answers from step 4 should be reloaded and visible in the input fields.
7.  **Submit Block 1:** Click the "Submit Block" button for the first block.
8.  **Verify Feedback:**
    - Inputs in the first block should now be **disabled**.
    - Correct/incorrect answers should be highlighted with the appropriate **green/red styling**.
    - The **diagnostics header** should update with a new score and percentage.
    - The **performance chart** should now display bars representing the categories from the first block.
9.  **Repeat for All Blocks:** Continue answering and submitting the remaining blocks one by one. Verify that the score and chart update correctly after each submission.
10. **Verify Final "Review Mode":** After submitting the final block, verify:
    - A "Test Complete" message appears.
    - All "Submit Block" buttons are hidden or disabled.
    - The test is effectively read-only.

### Test Case 2.2: Multi-Tab Isolation
1.  **Launch** the application.
2.  **Open both** the "Student Grammar" and "Student Verbs" tests in separate tabs.
3.  **Interact with Tab 1:** In the "Student Grammar" tab, answer a few questions in the first block but **do not submit**.
4.  **Switch to Tab 2:** Navigate to the "Student Verbs" tab.
5.  **Verify State Isolation:** The "Student Verbs" test should be completely empty and unaffected by your actions in the other tab.
6.  **Interact with Tab 2:** Answer and submit the first block of the "Student Verbs" test.
7.  **Verify UI Update:** The score and chart in the "Student Verbs" tab should update correctly.
8.  **Switch back to Tab 1:** Return to the "Student Grammar" tab.
9.  **Verify State Persistence:** Your un-submitted answers from step 3 should still be present, and the UI should show no impact from the submission that occurred in the other tab.

---

## 3. Offline Functionality Test

### Test Case 3.1: Verify Offline Operation
1.  **Follow instructions** from section 1 to enter an offline state.
2.  **Launch** the application.
3.  **Open** one of the diagnostic tests (e.g., "Student Grammar").
4.  **Verification:**
    - The page should load without errors.
    - **Crucially, the performance chart at the top of the test should render correctly** (it will be empty, but it should appear). If the chart is missing, the offline functionality is broken.
5.  **(Optional) Full Test:** You can run through the test cases in section 2 while offline to ensure full functionality.

---

## 4. Test Log

*(This section is for recording the results of the tests)*

- **Test Case 2.1 (Grammar):**
- **Test Case 2.1 (Verbs):**
- **Test Case 2.2:**
- **Test Case 3.1:**

---

## Developer Notes (2025-08-05)

- **Issue 1 Fix:** Addressed the "404 Not Found" error for `chart.umd.min.js`. The issue was caused by the file not being included in the application's final build.
    - **Solution:** The Webpack configuration (`webpack.renderer.config.js`) was updated to use the `copy-webpack-plugin`. This plugin now correctly copies the `src/lib` directory (containing the Chart.js file) to the build output, making it available to the application at runtime. This resolves the loading error and allows the performance charts in the diagnostic tests to function correctly.

---

## Developer Notes (2025-08-05) - Addendum

- **Issue 1 Root Cause Analysis:** The persistence of the "404 Not Found" error for `chart.umd.min.js` after the initial fix was due to a misconfiguration in the build process.
    - **Cause:** The Electron Forge configuration (`forge.config.js`) defines a named entry point (`name: 'main_window'`), which instructs Webpack to place the application's `index.html` inside a `main_window` subdirectory in the final build.
    - **Problem:** The previous Webpack fix copied the `lib` folder to the root of the build output, while the `index.html` file was looking for it at the relative path `./lib/chart.umd.min.js` *from within its subdirectory*. This resulted in a path mismatch.
    - **Final Solution:** The `copy-webpack-plugin` configuration in `webpack.renderer.config.js` was updated. The destination path was changed from `'lib'` to `'main_window/lib'`. This ensures the library is copied into the correct subdirectory, aligning with where `index.html` expects to find it and resolving the 404 error.

---

## Developer Notes (2025-08-05) - Issue 3 Fix

- **Issue 3 Fix:** Addressed the missing feedback for selected answers in diagnostic tests.
    - **Solution:** The `diagnostic-test-handler.js` was updated. When a user clicks a multiple-choice option, the button will now receive a grey background (`bg-slate-200`) to visually confirm the selection before the block is submitted. This replaces the previous, less noticeable indigo highlight.

---

## Developer Notes (2025-08-05) - Issue 4 Fix

- **Issue 4 Fix:** Re-implemented the missing "My Notes" area below each question in the diagnostic tests.
    - **Solution:** The `diagnostic-test-handler.js` was updated to dynamically create and manage a collapsible notes section for every question.
        - The state object for each question was modified to include a `notes: ''` property to store the user's input.
        - The `renderQuestion` method now appends a `<details>` element containing a `<textarea>` to each question's HTML.
        - An event listener was added to the notes `<textarea>` to auto-save its content to the state, ensuring persistence across reloads.

---

## Developer Notes (2025-08-05) - Visual Tweak

- **Change:** Adjusted the styling of the "My Notes" label to be less visually prominent, per user feedback.
    - **Solution:** The `className` for the notes `<summary>` element in `diagnostic-test-handler.js` was changed to use a lighter font weight (`font-normal`) and a more subtle text color (`text-slate-500`).

---

## Developer Notes (2025-08-05) - Issue 6 Fix

- **Issue 6 Fix:** Addressed the concern that many "Rewrite the sentence" exercises were lacking instructions.
    - **Analysis:** The issue was traced to several `input_rewrite` exercises in the `DV-student-verbs.html` file. While these exercises had post-answer explanations, they lacked explicit, up-front instructions within the question text, making the task unclear.
    - **Solution:** The `question` field for nine exercises (A7-A11, B13-B15, and C1) in `DV-student-verbs.html` was updated to include a clear, italicized instruction (e.g., "<em>Complete the second sentence so that it has a similar meaning to the first.</em>"). This change makes the exercises more consistent with those in the grammar diagnostic and clarifies the user's task.

---


## Developer Notes (2025-08-05) - Issue 6 Final Fix

- **Issue 6 Fix (Block C Preamble):** Implemented a robust fix to ensure the context-setting text for Block C of the grammar diagnostic test is always visible.
    - **Problem:** The previous fix, which placed the text in a `sectionExplanation` property, failed because that property is only rendered for specific question types and was being ignored for the multiple-choice questions in Block C.
    - **Solution:**
        1.  A new property, `blockPreamble`, was introduced at the block level in the JSON data structure.
        2.  The rendering logic in `diagnostic-test-handler.js` was updated to check for this `blockPreamble` property and render its content at the top of the block, after the title but before any questions.
        3.  The data in `DG-student-grammar.html` was updated to use this new `blockPreamble` property for Block C, ensuring the introductory text now appears correctly and reliably.

---

## Developer Notes (2025-08-05) - Issue 7 Fix

- **Issue 7 Fix:** Addressed the poor readability of the text labels on the performance chart bars.
    - **Problem:** The default text color for the data labels on the chart had very low contrast against the bar background, making percentages (like "6%") nearly invisible.
    - **Solution:** The Chart.js configuration in `diagnostic-test-handler.js` was updated to include a `datalabels` plugin configuration. This change sets the label color to a high-contrast dark shade (`#111827`), making it clearly visible. The font size and weight were also adjusted for better readability, and labels for 0% values are now hidden to reduce clutter.

---

## Developer Notes (2025-08-05) - Issue 2 Fix

- **Issue 2 Fix:** Refactored the diagnostic test UI to use a tabbed interface for different blocks, as requested.
    - **Analysis:** The user expressed a desire for the "Block A," "Block B," etc., sections of the diagnostic tests to function as tabs, similar to the "Fase" system in the standard exercises, rather than as a single scrolling page.
    - **Solution:**
        1.  The `diagnostic-test-handler.js` was significantly updated, using `exercise-handler.js` as a model.
        2.  A `currentBlockIndex` property was added to the state object to track the active tab.
        3.  The `render` method was overhauled to first render a set of tab buttons (`createBlockTabs`) and then render only the content of the *active* block.
        4.  Event listeners (`addBlockTabListeners`) were added to the tabs to update the state and trigger a re-render when a user switches between blocks.
    - **Outcome:** The diagnostic tests now present each block in a separate, self-contained tab, matching the user's specified navigation preference.

---

User logs area
Grammar and verbs seem to share the same issues
REMINDER TO NOT DO ANY TESTING in your environment!! i'll do it

Log 1
Lessons, LessonsAN and excercises seem undamaged

Issue 1) > FIXED (console no longer shows those errors)
On opening the app in console i see the following:
Failed to load resource: the server responded with a status of 404 (Not Found)
index.html:1 Refused to execute script from 'http://localhost:3000/main_window/lib/chart.umd.min.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled.

post Issue 1 Fix, issue persists
chart.umd.min.js:1 
        
        
       Failed to load resource: the server responded with a status of 404 (Not Found)
index.html:1 Refused to execute script from 'http://localhost:3000/main_window/lib/chart.umd.min.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled.

Issue 2) > FIXED
Grammar test opens
There was a misunderstanding, i wish to mantain the block A, block B, block C structure tab-like
Same as with the 'Fase' in the excercises.

Issue 3) > FIXED
Block B of the grammar area, given it's not supposed to immediately show the correct/incorrect answer
Correctly doesn't go for green/red, but a feedback for selected answer is missing
Opt for a greyer background for selected answer

Issue 4) > FIXED
Notes areas below each question is missing, that's important and was to be mantained.

Issue 5)
the 'areas' for different excercises types in block B and C are unclear, some separation is required for clarity.
for example split them into A1-1 (which is actually composed of multiple answers that fit under A1-X). then A2-1 to A2-1 to A2-10, does that make sense?
this is relevant for all blocks for both verb and grammar, evaluate and address

Issue 6) > FIXED
A significant amount of 'Rewrite the sentence according to the instructions.' is actually lacking the mentioned explanation.
the test for verbs seems okay
but for grammar questions B9 to B13 are unclear in their explanations of what is being asked
Questions C1 to C10 should also have, before C1, a view of the text as a whole for clarity. with no ... anywhere in this single block.
Seeing the parts of the text split into the 10 questions without the whole thing being visible before them makes things unclear.

Issue 7) > Unchanged after 1 attempt
The text for the chart is really hard to read 
the 6% is completely white on white, everything has little contrast.

Issue 8)
Once you click on diagnostics there is at the moment seemingly no way to go back to reset only specific blocks and navigation is annoying
For this purpose, as continuation Issue 2) diagnostics should be a fourth 'block-tab'
And three buttons to reset the three blocks should be added to the intro to the page
Similarly the submit buttons would be helpful all together in the intro
One row for the submits
One row for the reverse-submit

Issue 9)
The greens and reds for correct/incorrect across the whole app are slightly too bright/intense
Tone them down, but only a little


FINAL TASK 
once all issues are solved, generate a test-template.html
like you have done for lessons, lessonsAN and excercises
this will serve as base for future tests
make sure it doesn't show in the app though