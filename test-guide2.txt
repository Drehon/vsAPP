# Test Guide for Phase 4: Diagnostic Modules

This document provides instructions for testing the application after the completion of the Phase 4 refactoring. The focus is on verifying the functionality of the newly migrated diagnostic tests and ensuring the application's robustness.

---

## 1. Test Environment Setup

- **Browser:** Use a modern web browser (e.g., Chrome, Firefox).
- **Offline Simulation:** For offline testing, you must first ensure the local Chart.js library is present.
  - **Verify File:** Check that the file `src/lib/chart.umd.min.js` exists. If not, follow the download instructions in `work/refacto-4.txt` (Bonus Step).
  - **Disconnect:** After verifying the file, disconnect your computer from the internet or use your browser's developer tools to simulate an offline network condition.

---

## 2. Test Cases for Diagnostic Tests

These tests should be run for **both** diagnostic test pages:
- **"Student Grammar"** (loads from `others/DG-student-grammar.html`)
- **"Student Verbs"** (loads from `others/DV-student-verbs.html`)

### Test Case 2.1: Basic Functionality and State Persistence
1.  **Launch** the application.
2.  From the main menu, **open the "Student Grammar" test**.
3.  **Verify Initial State:** The test should render completely, with the diagnostics header (Score: 0%, 0/XX) and an empty performance chart visible.
4.  **Answer First Block:** Fill in some answers for the first block. Deliberately provide a mix of correct and incorrect answers.
5.  **Reload the Tab:** Close the "Student Grammar" tab and then re-open it from the main menu.
6.  **Verify Persistence:** Your answers from step 4 should be reloaded and visible in the input fields.
7.  **Submit Block 1:** Click the "Submit Block" button for the first block.
8.  **Verify Feedback:**
    - Inputs in the first block should now be **disabled**.
    - Correct/incorrect answers should be highlighted with the appropriate **green/red styling**.
    - The **diagnostics header** should update with a new score and percentage.
    - The **performance chart** should now display bars representing the categories from the first block.
9.  **Repeat for All Blocks:** Continue answering and submitting the remaining blocks one by one. Verify that the score and chart update correctly after each submission.
10. **Verify Final "Review Mode":** After submitting the final block, verify:
    - A "Test Complete" message appears.
    - All "Submit Block" buttons are hidden or disabled.
    - The test is effectively read-only.

### Test Case 2.2: Multi-Tab Isolation
1.  **Launch** the application.
2.  **Open both** the "Student Grammar" and "Student Verbs" tests in separate tabs.
3.  **Interact with Tab 1:** In the "Student Grammar" tab, answer a few questions in the first block but **do not submit**.
4.  **Switch to Tab 2:** Navigate to the "Student Verbs" tab.
5.  **Verify State Isolation:** The "Student Verbs" test should be completely empty and unaffected by your actions in the other tab.
6.  **Interact with Tab 2:** Answer and submit the first block of the "Student Verbs" test.
7.  **Verify UI Update:** The score and chart in the "Student Verbs" tab should update correctly.
8.  **Switch back to Tab 1:** Return to the "Student Grammar" tab.
9.  **Verify State Persistence:** Your un-submitted answers from step 3 should still be present, and the UI should show no impact from the submission that occurred in the other tab.

---

## 3. Offline Functionality Test

### Test Case 3.1: Verify Offline Operation
1.  **Follow instructions** from section 1 to enter an offline state.
2.  **Launch** the application.
3.  **Open** one of the diagnostic tests (e.g., "Student Grammar").
4.  **Verification:**
    - The page should load without errors.
    - **Crucially, the performance chart at the top of the test should render correctly** (it will be empty, but it should appear). If the chart is missing, the offline functionality is broken.
5.  **(Optional) Full Test:** You can run through the test cases in section 2 while offline to ensure full functionality.

---

## 4. Test Log

*(This section is for recording the results of the tests)*

- **Test Case 2.1 (Grammar):**
- **Test Case 2.1 (Verbs):**
- **Test Case 2.2:**
- **Test Case 3.1:**

---

## Developer Notes (2025-08-05)

- **Issue 1 Fix:** Addressed the "404 Not Found" error for `chart.umd.min.js`. The issue was caused by the file not being included in the application's final build.
    - **Solution:** The Webpack configuration (`webpack.renderer.config.js`) was updated to use the `copy-webpack-plugin`. This plugin now correctly copies the `src/lib` directory (containing the Chart.js file) to the build output, making it available to the application at runtime. This resolves the loading error and allows the performance charts in the diagnostic tests to function correctly.

---

## Developer Notes (2025-08-05) - Addendum

- **Issue 1 Root Cause Analysis:** The persistence of the "404 Not Found" error for `chart.umd.min.js` after the initial fix was due to a misconfiguration in the build process.
    - **Cause:** The Electron Forge configuration (`forge.config.js`) defines a named entry point (`name: 'main_window'`), which instructs Webpack to place the application's `index.html` inside a `main_window` subdirectory in the final build.
    - **Problem:** The previous Webpack fix copied the `lib` folder to the root of the build output, while the `index.html` file was looking for it at the relative path `./lib/chart.umd.min.js` *from within its subdirectory*. This resulted in a path mismatch.
    - **Final Solution:** The `copy-webpack-plugin` configuration in `webpack.renderer.config.js` was updated. The destination path was changed from `'lib'` to `'main_window/lib'`. This ensures the library is copied into the correct subdirectory, aligning with where `index.html` expects to find it and resolving the 404 error.

---

## Developer Notes (2025-08-05) - Issue 3 Fix

- **Issue 3 Fix:** Addressed the missing feedback for selected answers in diagnostic tests.
    - **Solution:** The `diagnostic-test-handler.js` was updated. When a user clicks a multiple-choice option, the button will now receive a grey background (`bg-slate-200`) to visually confirm the selection before the block is submitted. This replaces the previous, less noticeable indigo highlight.

---

## Developer Notes (2025-08-05) - Issue 4 Fix

- **Issue 4 Fix:** Re-implemented the missing "My Notes" area below each question in the diagnostic tests.
    - **Solution:** The `diagnostic-test-handler.js` was updated to dynamically create and manage a collapsible notes section for every question.
        - The state object for each question was modified to include a `notes: ''` property to store the user's input.
        - The `renderQuestion` method now appends a `<details>` element containing a `<textarea>` to each question's HTML.
        - An event listener was added to the notes `<textarea>` to auto-save its content to the state, ensuring persistence across reloads.

---

## Developer Notes (2025-08-05) - Visual Tweak

- **Change:** Adjusted the styling of the "My Notes" label to be less visually prominent, per user feedback.
    - **Solution:** The `className` for the notes `<summary>` element in `diagnostic-test-handler.js` was changed to use a lighter font weight (`font-normal`) and a more subtle text color (`text-slate-500`).

---

## Developer Notes (2025-08-05) - Issue 6 Fix

- **Issue 6 Fix:** Addressed the concern that many "Rewrite the sentence" exercises were lacking instructions.
    - **Analysis:** The issue was traced to several `input_rewrite` exercises in the `DV-student-verbs.html` file. While these exercises had post-answer explanations, they lacked explicit, up-front instructions within the question text, making the task unclear.
    - **Solution:** The `question` field for nine exercises (A7-A11, B13-B15, and C1) in `DV-student-verbs.html` was updated to include a clear, italicized instruction (e.g., "<em>Complete the second sentence so that it has a similar meaning to the first.</em>"). This change makes the exercises more consistent with those in the grammar diagnostic and clarifies the user's task.

---


## Developer Notes (2025-08-05) - Issue 6 Final Fix

- **Issue 6 Fix (Block C Preamble):** Implemented a robust fix to ensure the context-setting text for Block C of the grammar diagnostic test is always visible.
    - **Problem:** The previous fix, which placed the text in a `sectionExplanation` property, failed because that property is only rendered for specific question types and was being ignored for the multiple-choice questions in Block C.
    - **Solution:**
        1.  A new property, `blockPreamble`, was introduced at the block level in the JSON data structure.
        2.  The rendering logic in `diagnostic-test-handler.js` was updated to check for this `blockPreamble` property and render its content at the top of the block, after the title but before any questions.
        3.  The data in `DG-student-grammar.html` was updated to use this new `blockPreamble` property for Block C, ensuring the introductory text now appears correctly and reliably.

---

## Developer Notes (2025-08-05) - Issue 7 Fix

- **Issue 7 Fix:** Addressed the poor readability of the text labels on the performance chart bars.
    - **Problem:** The default text color for the data labels on the chart had very low contrast against the bar background, making percentages (like "6%") nearly invisible.
    - **Solution:** The Chart.js configuration in `diagnostic-test-handler.js` was updated to include a `datalabels` plugin configuration. This change sets the label color to a high-contrast dark shade (`#111827`), making it clearly visible. The font size and weight were also adjusted for better readability, and labels for 0% values are now hidden to reduce clutter.

<!DOCTYPE html>
<html lang="it">
  <head>
    <meta charset="UTF-8" />
    <title>VSAPP - Home</title>
    <!-- The CSS file is now imported directly in renderer.js -->
    <!-- Removed Google Fonts link for Inter to self-host -->
    <style>
      /* Font family is now defined via @font-face in index.css */
      body {
        font-family: 'Inter', sans-serif;
      }
    </style>
    <!-- Added Chart.js from CDN for diagnostic charts -->
    <script src="./lib/chart.umd.min.js"></script>
    <!-- Added Chart.js Datalabels plugin for better chart readability -->
    <script src="./lib/chartjs-plugin-datalabels.min.js"></script>
  </head>
  <body class="bg-slate-800 text-white flex flex-col h-screen">

    <!-- Sticky Header Container -->
    <div class="sticky top-0 z-20 flex-shrink-0">
      <!-- Tab Bar -->
      <div id="tab-bar" class="bg-slate-900 flex items-center pr-2">
        <!-- Tabs will be added here dynamically -->
        <button id="new-tab-btn" class="w-9 h-9 bg-slate-700 hover:bg-indigo-600 flex-shrink-0 flex items-center justify-center">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
        </button>
      </div>

      <!-- Global Toolbar -->
      <div id="global-toolbar" class="bg-slate-700 border-b border-t border-slate-600 px-4 py-1 flex justify-between items-center">
        <div class="flex items-center gap-2">
          <button id="global-home-btn" title="Go Home" class="p-2 rounded-md hover:bg-slate-600">
            <svg class="w-5 h-5 text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
          </button>
          <button id="global-reload-btn" title="Reload Content" class="p-2 rounded-md hover:bg-slate-600">
            <svg class="w-5 h-5 text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h5M20 20v-5h-5M4 4l16 16"></path></svg>
          </button>
        </div>
        <div class="flex items-center gap-2">
          <button id="global-save-btn" class="text-sm bg-green-500 hover:bg-green-600 text-white font-bold py-1 px-3 rounded-lg transition-colors">Salva</button>
          <button id="global-load-btn" class="text-sm bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-3 rounded-lg transition-colors">Carica</button>
          <button id="global-reset-btn" class="text-sm bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-lg transition-colors">Azzera</button>
          <div class="bg-slate-600 rounded-lg py-1 px-3 w-40 flex-shrink-0 flex items-center justify-center" style="min-width: 8rem;">
            <span id="reset-feedback-message" class="text-sm text-green-400 font-bold transition-opacity duration-500 opacity-0">&nbsp;</span>
          </div>
          <button id="global-github-btn" title="Open on GitHub" class="p-2 rounded-md hover:bg-slate-600">
            <svg class="w-6 h-6 text-slate-300" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path></svg>
          </button>
          <button id="global-settings-btn" title="Settings" class="p-2 rounded-md hover:bg-slate-600">
            <svg class="w-6 h-6 text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Content Panes -->
    <div id="content-panes" class="relative flex-grow overflow-y-auto bg-slate-600"></div>

    <!-- Footer -->
    <footer class="flex-shrink-0 bg-slate-900 text-slate-400 text-xs p-2 flex justify-between items-center">
      <div>App Version: <span id="app-version">Loading...</span></div>
      <div class="flex items-center space-x-4"> <!-- Container for network and update status -->
        <!-- Network Status -->
        <div id="network-status" class="flex items-center">
          <span class="w-3 h-3 rounded-full mr-2" id="network-indicator"></span>
          <span id="network-label"></span>
        </div>
        <!-- Update Status -->
        <div id="update-status" class="flex items-center">
          <span class="w-3 h-3 rounded-full mr-2 bg-gray-400" id="update-indicator"></span> <!-- Initial grey dot -->
          <span id="update-label">Checking for updates...</span> <!-- Initial text -->
        </div>
      </div>
    </footer>
    
  </body>
</html>

---

## Developer Notes (2025-08-05) - Issue 7 Final Attempt

- **Issue 7 Fix:** Final attempt to fix the unreadable text on the performance chart.
    - **Problem Analysis:** After multiple failed attempts, the new hypothesis is that semi-transparent `rgba` colors are not rendering correctly in the user's environment, causing the chart bars to have a light background and making light-colored text unreadable.
    - **Solution:** To eliminate all potential rendering issues with transparency, the chart colors have been changed to be completely solid.
        1.  In `diagnostic-test-handler.js`, the `backgroundColor` for the chart dataset was changed to a solid dark indigo (`#4F46E5`).
        2.  The `color` for the `datalabels` was set to solid white (`#FFFFFF`).
    - This approach provides the maximum possible contrast and should resolve the readability issue regardless of the environment's rendering quirks.


---

## Developer Notes (2025-08-05) - Issue 2 Fix

- **Issue 2 Fix:** Refactored the diagnostic test UI to use a tabbed interface for different blocks, as requested.
    - **Analysis:** The user expressed a desire for the "Block A," "Block B," etc., sections of the diagnostic tests to function as tabs, similar to the "Fase" system in the standard exercises, rather than as a single scrolling page.
    - **Solution:**
        1.  The `diagnostic-test-handler.js` was significantly updated, using `exercise-handler.js` as a model.
        2.  A `currentBlockIndex` property was added to the state object to track the active tab.
        3.  The `render` method was overhauled to first render a set of tab buttons (`createBlockTabs`) and then render only the content of the *active* block.
        4.  Event listeners (`addBlockTabListeners`) were added to the tabs to update the state and trigger a re-render when a user switches between blocks.
    - **Outcome:** The diagnostic tests now present each block in a separate, self-contained tab, matching the user's specified navigation preference.

---

## Developer Notes (2025-08-05) - Issue 8 Fix

- **Issue 8 Fix:** Implemented a "Diagnostics" tab and centralized controls for managing test progress.
    - **Analysis:** The user found it difficult to navigate and manage the diagnostic test blocks. The request was to add a fourth tab to act as a control panel, providing an overview and easy access to block-level actions.
    - **Solution:**
        1.  **Tabbed Interface:** The `diagnostic-test-handler.js` was refactored to use a tab-based navigation system, similar to the standard exercises. A `currentBlockIndex` was added to the state to manage the active tab.
        2.  **New "Diagnostics" Tab:** A fourth tab, "Diagnostics," was added. This tab serves as a central hub for managing the test.
        3.  **Centralized Controls:** The "Diagnostics" tab contains three sets of controls:
            -   **Submit Buttons:** One button for each block to allow for easy submission.
            -   **Un-submit Buttons:** Allows a user to revert a submitted block back to an editable state *without* clearing their answers.
            -   **Reset Buttons:** Allows a user to completely clear all answers and progress for a specific block.
        4.  **New State Logic:** New methods (`unsubmitBlock`, `resetBlock`) and event listeners (`addDiagnosticsTabListeners`) were added to `diagnostic-test-handler.js` to handle the logic for these new controls.

---

## Developer Notes (2025-08-05) - Issue CC Fix

- **Issue CC Fix:** Overhauled the diagnostic test UI to relocate block controls and redesign the "Diagnostics" tab.
    - **Analysis:** The user requested that the Submit, Revert, and Reset buttons be moved out of the "Diagnostics" tab and placed in a global, page-level header. The "Diagnostics" tab itself was to be repurposed to show the chart, explanatory text, and a new teacher notes area.
    - **Solution:**
        1.  **Global Controls:** A new function, `renderGlobalControls`, was created in `diagnostic-test-handler.js`. This function generates a control panel at the top of the page, containing all Submit, Revert, and Reset buttons in a compact, centered, three-group layout as specified. An accompanying `addGlobalControlsListeners` function was created to handle their events.
        2.  **Redesigned "Diagnostics" Tab:** The `renderDiagnosticsTab` function was completely refactored. It no longer renders any buttons. Instead, it now renders:
            - The main performance chart and scores (if any block is submitted).
            - A placeholder section for explanatory text regarding evaluation areas.
            - A new, large `<textarea>` for the teacher's notes.
        3.  **State Management:** The application's state object was updated to include a `teacherNotes` property. The `addDiagnosticsTabListeners` function was updated to save any input from the new textarea, ensuring teacher notes are persisted.

---

## Developer Notes (2025-08-05) - UI Tweak for Global Controls

- **Change:** Adjusted the styling of the global control panel based on user feedback.
    - **Solution:** In `diagnostic-test-handler.js`, the `renderGlobalControls` function was updated. Each button group (Submit, Revert, Reset) is now wrapped in a `div` with a semi-transparent background color (`bg-indigo-900/30`, etc.) and additional padding. The spacing between the groups was also increased to provide better visual separation.

---



## Developer Notes (2025-08-05) - Final UI Refinements

- **Change:** Refined the styling of the global control panel based on a final round of user feedback.
    - **Solution:** The `renderGlobalControls` function in `diagnostic-test-handler.js` was updated again. The padding and spacing for the button groups were increased to create more separation. Additionally, the individual buttons within each group were given a small gap to ensure they don't touch, improving the overall visual clarity of the control panel.

---

## Developer Notes (2025-08-05) - Issue DD Fix

- **Issue DD Fix:** Fixed an issue where multiple-choice buttons in diagnostic tests became unresponsive.
    - **Analysis:** The bug was introduced after refactoring the UI to include a global control panel. The function responsible for adding event listeners (`addQuestionBlockListeners`) was using a generic selector (`[data-block-index='...']`) to find the question container. This selector was mistakenly matching buttons in the new global control panel instead of the intended `div` that contains the questions.
    - **Solution:** The selector in `addQuestionBlockListeners` was made more specific by changing it from `[data-block-index='...']` to `div[data-block-index='...']`. This ensures that the event listeners are attached only to the correct question container `div`, restoring the functionality of the multiple-choice buttons.
---

## Developer Notes (2025-08-05) - Issue EE Follow-up

- **Issue EE Status:** Unresolved.
    - **Summary:** Multiple attempts were made to improve the readability of the 'Submit', 'Revert', and 'Azzera' labels by applying different text-shadow effects (`glow` and `offset/darker color`).
    - **Outcome:** Neither attempt produced the desired visual change in the user's environment. The issue remains open. Further investigation will be handled in a new task.

---

## Developer Notes (2025-08-05) - Issue EE Fix

- **Issue EE Fix:** Addressed the readability of the 'Submit', 'Revert', and 'Azzera' labels in the global control panel.
    - **Problem:** The text labels for the button groups were hard to read against their background. The previous approach of using `text-shadow` was ineffective.
    - **Solution:** Based on user feedback, the approach was changed from text effects to background colors. The `<span>` elements for the labels in `diagnostic-test-handler.js` were updated to use solid background colors (blue for Submit, yellow for Revert, red for Azzera) with contrasting text. The 'Revert' label now uses black text for better readability on the yellow background, while the others use white text. This makes the labels clear and readable, appearing as distinct tags and resolving the issue.

---

## Developer Notes (2025-08-05) - Issue EE Fix v2

- **Issue EE Fix:** Addressed the readability of the 'Revert' buttons in the global control panel.
    - **Problem:** The Tailwind CSS classes for orange background were not being applied correctly in the user's environment, resulting in buttons with a white background.
    - **Solution:** To bypass the CSS class issue, the `renderGlobalControls` function in `diagnostic-test-handler.js` was modified to apply inline styles directly to the 'Revert' button and its label. The background color is now set to a standard orange (`#F97316`) and the text color to white, ensuring the correct appearance regardless of the CSS build process.

---

User logs area
Grammar and verbs seem to share the same issues
REMINDER TO NOT DO ANY TESTING in your environment!! i'll do it

Log 1
Lessons, LessonsAN and excercises seem undamaged

Issue 1) > FIXED (console no longer shows those errors)
On opening the app in console i see the following:
Failed to load resource: the server responded with a status of 404 (Not Found)
index.html:1 Refused to execute script from 'http://localhost:3000/main_window/lib/chart.umd.min.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled.

post Issue 1 Fix, issue persists
chart.umd.min.js:1 
        
        
       Failed to load resource: the server responded with a status of 404 (Not Found)
index.html:1 Refused to execute script from 'http://localhost:3000/main_window/lib/chart.umd.min.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled.

Issue 2) > FIXED
Grammar test opens
There was a misunderstanding, i wish to mantain the block A, block B, block C structure tab-like
Same as with the 'Fase' in the excercises.

Issue 3) > FIXED
Block B of the grammar area, given it's not supposed to immediately show the correct/incorrect answer
Correctly doesn't go for green/red, but a feedback for selected answer is missing
Opt for a greyer background for selected answer

Issue 4) > FIXED
Notes areas below each question is missing, that's important and was to be mantained.

Issue 5)
the 'areas' for different excercises types in block B and C are unclear, some separation is required for clarity.
for example split them into A1-1 (which is actually composed of multiple answers that fit under A1-X). then A2-1 to A2-1 to A2-10, does that make sense?
this is relevant for all blocks for both verb and grammar, evaluate and address
i think the html have to be modifed to reflect this new structure (renaming A1 etc with the new system), and then gaps visually added to separate the 'areas' in a block.

Issue 6) > FIXED
A significant amount of 'Rewrite the sentence according to the instructions.' is actually lacking the mentioned explanation.
the test for verbs seems okay
but for grammar questions B9 to B13 are unclear in their explanations of what is being asked
Questions C1 to C10 should also have, before C1, a view of the text as a whole for clarity. with no ... anywhere in this single block.
Seeing the parts of the text split into the 10 questions without the whole thing being visible before them makes things unclear.

Issue 7) > Unchanged after multiple attempts
The text for the chart is really hard to read 
the 6% is completely white on white, everything has little contrast.
open a new txt named carta.txt and inside analyze the issue, proposing alternative solutions, for example we might altogether change the chart
do you feel the current chart is the best option for what we are doing?

Issue 8)
As continuation of Issue 2) diagnostics should be a fourth 'tab' besides the three for the blocks
Three buttons to revert the submit for each of the three blocks should be added 
Similarly the three submit buttons should be placed in the same place
Like this
Revert A   Revert B   Revert C
Submit A   Submit B   Submit C

Issue CC) > FIXED
The diagnostics tab should only contain
- text explaining the different english-areas of evaluation
- the overall chart/scores
- a teacher notes area, where the teacher can manually input text regarding the overall diagnostics

Thus, add all these and move the submit, revert and reset buttons away from the diagnostic tab
They should be part of the intro/explanation at the top of the overall page
The buttons should be placed centrally and rendered correctly
They should be placed on the same row, with submit group  of three > then revert group  of three> then reset group of three
They should be small, not OVERLY noticeable and visually part of the intro 'foreground'.

Issue DD) > FIXED
After modifications for issue 8 and issue CC, the buttons for multi-choice questions are unresponsive

Issue EE) > FIXED
to make things more uniform i'd like the revert text and the text for block 1, 2 and 3 for the revert are to be white
but that cannot work on yellow background. replace the yellow with a more fitting color, maybe an orange that would give the white text good contrast and make the text white.
attempts to get orange background were unsuccessfull, background is at the moment white. fix

Issue 9) > FIXED
The greens and reds for correct/incorrect across the whole app are slightly too bright/intense
Tone them down, but only a little

Issue 10) 
Fixing issue 6 has led to a situation where the start of each block has two 'lines' horizontally pressed to each other for every block except the one where the fix was intended
Please add a short intro to each block, detailing the topics, types of excercises, to visually fix this.
I imagine you have to modify the html themselves. or the jsons? or wherever you get the text in the htmls from.

FINAL TASK 
once all issues are solved, generate a test-template.html
like you have done for lessons, lessonsAN and excercises
this will serve as base for future tests
make sure it doesn't show in the app though