### **Objective for v1.1.4: Implement Toolbar UI & Visual Improvements**

Create a dedicated toolbar within each content view to house navigation and action buttons, and add an integrated update notification system.

---

#### **Phase 0: Version Update**

1.  **Update Version:**
    * In `package.json`, change `"version"` to `"1.1.4"`.

---

#### **Phase 1: UI & Logic Refactor (`renderer.js`)**

* **File to Edit:** `renderer.js`
* **Actions:**
    1.  **Create Toolbar Element:** In the function that loads content into a tab (`loadContentIntoTab`), dynamically create a toolbar `<div>` element. This toolbar will be prepended to the content pane for that tab.
    2.  **Populate Toolbar:**
        * **Left Side Group:** Create a `div` for left-aligned items.
            * Add a "Home" button (icon recommended) that calls `loadHomeIntoTab(tabId)`.
            * Add a "Reload" button (icon recommended) that calls `loadContentIntoTab(tabId, type, filePath)`.
        * **Right Side Group:** Create a `div` for right-aligned items (`ml-auto`).
            * Add "Save", "Load", and "Azzera Test" buttons, which will trigger the dropdown menus.
            * Add a GitHub icon that opens the repository URL in the user's default browser.
            * Add a small notification badge (e.g., a red dot) next to the GitHub icon, initially hidden.
    3.  **Remove Old Buttons:** Modify the logic that parses and injects exercise HTML to find and remove the old, hard-coded "Salva", "Carica", and "Azzera" buttons from the content itself.

---

#### **Phase 2: Refine Save/Load Modals**

* **File to Edit:** `renderer.js`
* **Action:** Refine the modal functions (`openSaveModal`, `openLoadModal`) to present as dropdown menus attached to the new toolbar buttons.

---

#### **Phase 3: Implement Update Checking**

* **Concept:** Use the `electron-updater` package to automatically check for new releases on GitHub and notify the user.
* **Backend (`main.js`):**
    1.  Import `autoUpdater` from `electron-updater`.
    2.  In the `app.on('ready', ...)` function, after `createWindow()`, add `autoUpdater.checkForUpdatesAndNotify();`.
    3.  Add a listener for the `update-available` event. When it fires, send a message to the renderer process.
        ```javascript
        autoUpdater.on('update-available', () => {
          mainWindow.webContents.send('update-available');
        });
        ```
* **Frontend (`preload.js`):**
    * Expose a new function to receive the update notification from the main process.
        ```javascript
        window.api = {
          // ... all other functions
          onUpdateAvailable: (callback) => ipcRenderer.on('update-available', (_event, ...args) => callback(...args))
        };
        ```
* **Frontend (`renderer.js`):**
    * In the main `DOMContentLoaded` listener, set up the listener for the update.
        ```javascript
        window.api.onUpdateAvailable(() => {
          // Logic to find the notification badge on the active toolbar and make it visible.
        });
        ```

---
---

### **Objective for v1.1.5: Advanced Quality of Life Improvements**

Introduce features that make the application more efficient and intuitive to use.

---

#### **Phase 0: Version Update**

1.  **Update Version:**
    * In `package.json`, change `"version"` to `"1.1.5"`.

---

#### **Phase 1: Progress Tracking on Home Screen**

* **Concept:** Provide visual feedback on the main "Home" view to indicate the status of each exercise.
* **Backend (`main.js`):**
    * Modify the `getContents` function to return an array of objects, e.g., `[{ fileName: 'L1.html', hasProgress: true }, ...]`, by checking for a corresponding file in the `autosaves` directory.
* **Frontend (`renderer.js`):**
    * Update `populateFileList` to check for the `hasProgress` flag and add a visual indicator (e.g., a green dot) to the link.

---

#### **Phase 2: Keyboard Shortcuts**

* **Concept:** Implement standard keyboard shortcuts.
* **Frontend (`renderer.js`):**
    * Add a global `keydown` event listener to handle shortcuts:
        * `Ctrl + T`: Add a new tab.
        * `Ctrl + W`: Close the active tab.
        * `Ctrl + R` / `F5`: Reload the active tab's view.
        * `Ctrl + S`: Trigger the "Save" action for the active tab.

---

#### **Phase 3: Search/Filter Functionality**

* **Concept:** Add a search bar to the "Home" view to filter content.
* **Frontend (`index.html`):**
    * Add an `<input type="text" id="search-bar">` to the header of the main content view.
* **Frontend (`renderer.js`):**
    * Add an `input` event listener to the search bar to filter the visible lessons and exercises in real-time.
