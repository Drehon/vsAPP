# UPDATE: This plan has been successfully implemented.

The repository is now configured with ESLint for linting and Jest for testing.
- To run the linter, use `npm run lint`.
- To run the tests, use `npm test`.

---

# Original Plan: Implementation Plan: Linting and Testing

Hello! This document provides a step-by-step guide for setting up automated linting and testing in this repository.

Implementing these systems will dramatically improve our collaboration. It will allow me, Jules, to programmatically verify my work against your standards, catch errors early, and ensure my changes don't break existing functionality. This leads to higher quality code and a more robust application.

---

## Part 1: Setting Up Linting with ESLint

**Goal:** To automatically check code for style consistency and common programming errors.

### Step 1: Install ESLint

Run the following command in your terminal at the root of the project to install ESLint as a development dependency:

```bash
npm install eslint --save-dev
```

### Step 2: Configure ESLint

ESLint has an interactive setup tool that makes configuration easy. Run this command:

```bash
npx eslint --init
```

This will ask you a series of questions. I recommend the following answers:
- **How would you like to use ESLint?** -> To check syntax, find problems, and enforce code style
- **What type of modules does your project use?** -> CommonJS (require/module.exports)
- **Which framework does your project use?** -> None of these
- **Does your project use TypeScript?** -> No
- **Where does your code run?** -> Check both `Browser` and `Node`. (Electron apps have both environments).
- **How would you like to define a style for your project?** -> Use a popular style guide
- **Which style guide do you want to follow?** -> Airbnb (This is a widely used, comprehensive style guide)
- **What format do you want your config file to be in?** -> JavaScript
- It will then ask if you want to install the necessary dependencies. Answer **Yes**.

This will create an `.eslintrc.js` file in your project root, which will define your coding standards.

### Step 3: Update `package.json`

To make it easy to run the linter, you should update the `scripts` section of your `package.json` file.

Replace this line:
`"lint": "echo \"No linting configured\""`

With this new line:
`"lint": "eslint src/**/*.js"`

This script tells ESLint to check all JavaScript files within the `/src` directory.

### How this helps me (Jules):
Once this is set up, I can run `npm run lint` before submitting my work. The tool will tell me if I've made any style violations or simple errors, and I can fix them immediately.

---

## Part 2: Setting Up Testing with Jest

**Goal:** To create a "safety net" that verifies your code's logic is correct and prevents accidental breakages (regressions).

### Step 1: Install Jest

Run this command to install Jest, a popular and easy-to-use testing framework:

```bash
npm install jest --save-dev
```

### Step 2: Configure Jest

Create a new file in the project root named `jest.config.js` with the following content:

```javascript
// jest.config.js
module.exports = {
  testEnvironment: 'node',
  verbose: true,
};
```
This basic configuration tells Jest to run tests in a Node.js environment, which is perfect for testing your application's logic.

### Step 3: Update `package.json`

Add a `test` script to your `package.json` file so you can run your tests easily.

```json
"scripts": {
  "start": "electron-forge start",
  "package": "electron-forge package",
  "make": "electron-forge make",
  "publish": "electron-forge publish",
  "lint": "eslint src/**/*.js",
  "test": "jest"
},
```
(Note: I've included the `lint` script from Part 1 here for context).

### Step 4: Write Your First Test (Example)

To see how it works, let's create a simple test.

1.  **Create a file to test.** Let's imagine you have a utility file at `src/sub-functions/utils.js`:
    ```javascript
    // src/sub-functions/utils.js
    function add(a, b) {
      return a + b;
    }
    module.exports = { add };
    ```

2.  **Create a test file.** By convention, test files end with `.test.js`. Create a new directory `tests/` at the root, and add the following file:
    ```javascript
    // tests/utils.test.js
    const { add } = require('../src/sub-functions/utils');

    describe('add function', () => {
      test('should correctly add two positive numbers', () => {
        expect(add(2, 3)).toBe(5);
      });

      test('should correctly handle negative numbers', () => {
        expect(add(-2, -3)).toBe(-5);
      });
    });
    ```
    Now, when you run `npm test` in your terminal, Jest will automatically find and run this test file.

### How this helps me (Jules):
With a test suite, I can run `npm test` after making any changes. This instantly tells me if my new code works AND if it has broken any existing features that have tests. I can also contribute by writing new tests for any new logic I add.

---

By implementing this plan, you will establish a professional-grade workflow that ensures a high standard of quality for this project. Thank you for considering these improvements!
