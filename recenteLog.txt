This document outlines every significant change made to the project files to resolve the build, publish, and auto-update issues.
1. The Build & Publish Process
Problem:

The initial npm run publish command failed with a Cannot find module error for publisher-helper.js. Subsequent attempts led to build loops, file locking errors, and other configuration conflicts.
Root Cause:

The core issue was a flawed architecture that mixed two different methods for triggering the publish process: an automatic postMake hook in forge.config.js and a manual call in the package.json script. This created conflicts, race conditions, and redundant operations.
Final Solution (A Single, Linear Workflow):

    forge.config.js - postMake Hook Added:

        Action: A postMake hook was added to forge.config.js. This hook is the definitive, single trigger for post-build actions.

        Logic: It ensures that after the application is successfully built (make), two things happen in order:

            The generate-update-yaml.js script is executed to create the latest.yml file.

            The newly created latest.yml is programmatically added to the list of artifacts that Electron Forge will upload to the GitHub release.

        Key Code Snippet (forge.config.js):

        hooks: {
          postMake: async (forgeConfig, makeResults) => {
            // 1. Generate the YAML file
            const scriptPath = path.join(__dirname, 'scripts', 'generate-update-yaml.js');
            execSync(`node "${scriptPath}"`, { stdio: 'inherit' });

            // 2. Find the .yml file and add it to the artifacts to be published
            // ... (logic to find and push yamlPath to makeResults) ...

            return makeResults;
          }
        }

    package.json - Script Simplified:

        Action: The publish script was simplified to a single command.

        Logic: Since the postMake hook now handles everything, the npm script's only job is to start the publish process.

        Final Script:

        "publish": "electron-forge publish"

    generate-update-yaml.js - Filename Corrected:

        Action: The script was corrected to generate the installer filename with a dot (.) instead of a space.

        Logic: This fixed the 404 "Not Found" error during auto-updates by ensuring the filename in latest.yml matched the actual filename on GitHub.

        Key Code Snippet (generate-update-yaml.js):

        const installerFileName = `${appName}-${appVersion}.Setup.exe`;

    publisher-helper.js - Deleted:

        Action: This script was removed entirely.

        Logic: Its functionality was fully and more reliably replaced by the postMake hook in forge.config.js.

2. The Auto-Update System
Problem:

The application would start, but the UI would get visually stuck at "Checking for updates..." or "Loading...". The logs showed various errors, including contextIsolation conflicts, preload script loading failures, and the updater skipping checks in development.
Root Cause:

A series of configuration mismatches between main.js, preload.js, and renderer.js prevented the three processes from communicating correctly.
Final Solution (A Cohesive IPC System):

    main.js - Security Settings Corrected:

        Action: The webPreferences in the BrowserWindow constructor were set to contextIsolation: false and nodeIntegration: true.

        Logic: This was done to match the application's existing architecture, which relies on these less secure, older Electron patterns. This resolved the contextBridge API error.

    main.js - Preload Path Corrected:

        Action: The preload path was changed to use the MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY global variable.

        Logic: This fixed the Unable to load preload script error by using the correct, absolute path provided by the Webpack build process.

    main.js - Auto-Update Logic Implemented:

        Action:

            autoUpdater.autoDownload = false; was added to prevent automatic downloads.

            autoUpdater.forceDevUpdateConfig = true; was added to enable testing in development.

            IPC listeners (start-download, restart-app) and event emitters (update-status, download-progress) were added.

        Logic: This established the main process as the central controller for the update process, waiting for commands from the UI.

    preload.js - API Exposure Corrected:

        Action: The script was rewritten to attach the API directly to the window object, removing the contextBridge.

        Logic: This aligns with the contextIsolation: false setting and makes the API functions available to the renderer process. It exposes all necessary channels (onUpdateStatus, startDownload, etc.).

    renderer.js - UI Logic Implemented:

        Action: Event listeners (window.api.onUpdateStatus, window.api.onDownloadProgress) were added.

        Logic: This is the final piece that "unsticks" the UI. The renderer now listens for messages from main.js and dynamically updates the status indicator with the appropriate messages and buttons ("Download", "Restart to Install", etc.), creating a fully interactive user experience.

    ---

    